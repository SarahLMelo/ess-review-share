// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  password  String
  birthdate DateTime
  email     String    @unique
  role      Role      @default(USER)
  phone     String?
  location  String?
  passwordResetToken String?
  resetTokenExpires DateTime?
  Review    Review[]
  Comment   Comment[]
  Evaluation Evaluation[]
  List List[]

  @@map("users")
}

model Review {
  id        String   @id @default(uuid())
  title     String
  review    String
  createdAt DateTime @default(now())
  likes     Int      @default(0)

  author User   @relation(fields: [userId], references: [id])
  userId String

  movie Movie @relation(fields: [movieId], references: [id])
  movieId String

  Evaluation        Evaluation? @relation(fields: [evaluationUserId, evaluationMovieId], references: [userId, movieId])
  evaluationUserId  String?
  evaluationMovieId String?

  Comment Comment[]

  @@unique([evaluationUserId, evaluationMovieId])
  @@map("reviews")
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now())

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  author User   @relation(fields: [userId], references: [id])
  userId String

  @@map("comments")
}

model Movie {
  id  String @id @default(uuid())

  Review     Review[]
  Evaluation Evaluation[]
  lists MovieList[]

  @@map("movies")
}

model Evaluation{
  author  User @relation(fields: [userId], references: [id])
  userId  String

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId String

  review  Review? 
  rating  Int

  @@id([userId, movieId])
  @@map("evaluations")
}

model List {
  name String

  owner User @relation(fields: [userId], references: [id])
  userId String

  movies MovieList[]
  @@id([userId, name])
  @@map("lists")
}

model MovieList {
  List List @relation(fields: [listOwner, listName], references: [userId, name])
  listOwner String
  listName String

  Movie Movie @relation(fields: [movieId], references: [id])
  movieId String

  @@id([listOwner, listName, movieId])
  @@map("movie_lists")
  
}


enum Role {
  USER
  ADMIN
}
